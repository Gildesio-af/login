------Criando autenticação com JWT-----

---Importar a dependência do JWT no pom.xml
   <dependecy>
       <groupId>io.jsonwebtoken</groupId>
       <artifactId>jjwt</artifactId>
   </dependecy>

---Cria a classe WebSecurityConfig
-Ex: @EnableWebSecurity
    public class WebSecurityConfig {

        @Bean
        public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
            return http
               " .authorizeRequests(authorizeRequests ->
                    authorizeRequests
                        .antMatchers("/").permitAll()
                        .anyRequest().authenticated()
                ) Só se quiser liberar alguma rota"
                .csrf(AbstractHttpConfigurer::disable)
                 .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                 .build();
        }

        @Bean
        public AuthenticationManager authenticationManager() throws Exception {
            return authenticationManagerBean();
        }

        @Bean
        public PasswordEncoder passwordEncoder(){
            return new BCryptPasswordEncoder();
        }
    }

---Criar a classe de UserCredentials ou implementar a UserDetails em um user já existente
-Ex: @Entity
     @Table(name = "tb_user")
     @AllArgsConstructor
     @NoArgsConstructor
     @Data
     public class User implements UserDetails {
         @Id
         @GeneratedValue(strategy = GenerationType.UUID)
         @Column(name = "user_id")
         private String id;
         private String username;
         private String email;
         private String password;
         @Column(name = "created_at")
         private LocalDateTime createdAt;

         @Override
         public Collection<? extends GrantedAuthority> getAuthorities() {
             return List.of(new SimpleGrantedAuthority("ROLE_USER"));
         }

         @Override
         public boolean isAccountNonExpired() {
             return true;
         }

         @Override
         public boolean isAccountNonLocked() {
             return true;
         }

         @Override
         public boolean isCredentialsNonExpired() {
             return true;
         }

         @Override
         public boolean isEnabled() {
             return true;
         }
     }

---Criar um método no repository para buscar o usuário pelo username
---Criar a classe UserDetailServiceImpl que extende a UserDetailsService
-Ex:
    @Service
    @RequiredArgsConstructor
    public class UserDetailServiceImpl implements UserDetailsService {

        private final UserRepository userRepository;

        @Override
        public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
            return userRepository.findByEmail(email).orElseThrow(() -> new UserNotFoundException("User not found with email: " + email));
        }

    }

----Adicionanando o JWT na aplicação
-Importar a dependência
<!-- https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-api -->
<dependency>
    <groupId>io.jsonwebtoken</groupId>
    <artifactId>jjwt-api</artifactId>
    <version>0.12.5</version>
</dependency>

---Criar controller para a auntenticação
Ex: @RestController
    @RequestMapping("/auth")
    public class AuthController {

        @PostMapping
        public ResponseEntity<?> login(@RequestBody AuthDTO authDTO) {
            return ResponseEntity.ok().body(auth);
        }
    }

---Criar AuthDTO para receber o usuário e a senha

---Injetar o AuthenticationManager no AuthController
-Ex: @RestController
     @RequestMapping("/auth")
     @RequiredArgsConstructor
     public class AuthController {
         private final AuthenticationManager authenticationManager;
         private final TokenService tokenService;
         private final UserDetailServiceImpl authenticated;

         @PostMapping
         public ResponseEntity<?> login(@RequestBody AuthDTO authDTO) {
             var auth = authenticated.authenticade(authDTO);
             return ResponseEntity.ok().body(auth);
         }
     }

---Criar uma token service